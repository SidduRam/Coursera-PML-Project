dt_x_train <- read.table("train/X_train.txt")
dt_y_train <- read.table("train/y_train.txt")
dtSubjectTrain <- read.table("train/subject_train.txt")
dt_x_test <- read.table("test/X_test.txt")
dt_y_test <- read.table("test/y_test.txt")
dtSubjectTest <- read.table("test/subject_test.txt")
# create 'x' data set
dt_x_data <- rbind(dt_x_train, dt_x_test)
# create 'y' data set
dt_y_data <- rbind(dt_y_train, dt_y_test)
# create 'subject' data set
dtSubject_data <- rbind(dtSubjectTrain, dtSubjectTest)
file.path(pathIn, "train", "subject_train.txt")
dt_x_train <- read.table(file.path(pathIn, "train", "X_train.txt"))
dt_y_train <- read.table(file.path(pathIn, "train", "y_train.txt"))
dtSubjectTrain <- read.table(file.path(pathIn, "train", "subject_train.txt"))
dt_x_test <- read.table(file.path(pathIn, "test", "X_test.txt")
dt_y_test <- read.table(file.path(pathIn, "test", "y_test.txt")
dtSubjectTest <- read.table(file.path(pathIn, "test", "subject_test.txt"))
dt_x_test <- read.table(file.path(pathIn, "test", "X_test.txt"))
dt_y_test <- read.table(file.path(pathIn, "test", "y_test.txt"))
dtSubjectTest <- read.table(file.path(pathIn, "test", "subject_test.txt"))
# create 'x' data set
dt_x_data <- rbind(dt_x_train, dt_x_test)
# create 'y' data set
dt_y_data <- rbind(dt_y_train, dt_y_test)
# create 'subject' data set
dtSubject_data <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject_data, "V1", "subject")
str(dtSubject_data)
dim(dtSubject_data)
setwd("C:/Data-Science/Reproducible ResearchPA2")
install.packages("bibtex")
setwd("C:/Data-Science/Working_Test1")
packages <- c("data.table", "quantmod")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Fix URL for reading - knitr
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
require(data.table)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNames
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
require(data.table)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP <- dtGDP[X != ""]
str(stGDP)
str(strGDP)
str(dtGDP)
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
str(dtGDP)
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
str(dtGDP)
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
str(gdp)
mean(gdp, na.rm=TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
require(data.table)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
dt[isFiscalYearEnd & isJune, Special.Notes]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
getwd()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(Swirl)
library(swirl)
R.version.string
library(swirl)
ls()
rm(list=ls())
library(swirl)
install_form_swirl("Getting and Cleaning Data")
insall_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
type packageVersion("dplyr")
type packageversion("dplyr")
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_os)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
dim(cran3)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
mydf
dim(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
summarize(cran, group_by(package))
summarize(cran, group_by("package"))
?group_by()
help(group_by())
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum, pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs  =0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
sumbit()
submit()
submit()
submit()
View(result3)
print()
print
submit()
sumbit()
submit()
submit()
submit()
library(tidyr)
qnorm(0.95, mean = 1100, sd = 75)
swirl()
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
.997*0.001
0.985*0.003
0.999*0.985
0.015*0.001
0.015*0.985
quit()
library
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
2
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, 2)
myplot2(20)
sleep now
sleep
g1
range(g1)
range(g2)
x <- g1 - g2
difference <- g2 - g1
difference
mean(difference)
s <- sd(difference)
mn
mn + c(-1, 1)*qt(0.975)*s/sqrt(10)
mn + c(-1, 1)*qt(0.975, 9)*s/sqrt(10)
x$conf.int
x$conf
t.test(difference)$conf
t.test(difference)$conf.int
sp <- (8-1)*(15.34)^2 + (21-1)*(18.23)^2
ns <- 27
sp <- sqrt(sp/ns)
x + c(-1, 1)*qt(0.975, 27)*sp/sqrt(10)
132.86 - 127.44+c(1,-1)*qt(0.975, ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp + c(1, -1)*qt(.975, 18)*
Dj
sp <- sqrt(sum(g1, g2)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(1, -1) * qt(.975, 18)*sp/sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(difference, var.equal = TRUE)$conf.
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34)^2/ 8 + (18.23)^2/21
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^4/8^2/(7) + (18.23^4)/21^2/20
dd
den <- (15.34^4/8^2/(7) + (18.23^4)/21^2/(20)
dfd
den <- (15.34^4/8^2/(7)) + (18.23^4/21^2/(20))
mydf <- num /den
132.86 - 127.44 + c(1, -1)*qt(.975, mydf)*(15.34^2/7+18.23^2/20)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(32)
10/10
2/1
2/(10/sqrt(16))
0.8
15
qt(0.975, 15)
qt(0.95, 15)
dim(fs)
t.test(fs$fheight - fs$sheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078
)
mybin
mybin[7]
mybin[8]
mybin[6]
mybin[5]
mybin[7]
mybin[5\
mybin[5]
mybin[4]
mybin[3]
mybin[2]
mybin[1]
mybin[7]
mybin[7]  mybin[8]
mybin[8]
mybin[0]
mybin[1]
mybin[2]
info()
skip()
getwd()
rm(list = ls())
library(UsingR);
data(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
x1 <- mtcars$weight
y1 <- factor(mtcars$mpg)
fitcar <- lm(y1~x1,na.action=na.exclude)
library(UsingR);
data(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
x1 <- mtcars$weight
y1 <- factor(mtcars$mpg)
fitcar <- lm(y1~x1,na.action=na.exclude)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
data(mtcars)
#mtcars[] <- lapply(mtcars, as.integer)
x1 <- mtcars$weight
y1 <- factor(mtcars$mpg)
fitcar <- lm(y1~x1,na.action=na.exclude)
lm(y1~x1,na.action=na.exclude)
x1 <- mtcars$wt
y1 <- factor(mtcars$mpg)
fitcar <- lm(y1~x1,na.action=na.exclude)
sumCoef <- summary(fitcar)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
mtcars[] <- lapply(mtcars, as.integer)
mtcars[] <- lapply(mtcars, as.integer)
x1 <- mtcars$wt
y1 <- factor(mtcars$mpg)
fitcar <- lm(y1~x1,na.action=na.exclude)
sumCoef <- summary(fitcar)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
x1 <- mtcars$wt
y1 <- mtcars$mpg
fitcar <- lm(y1~x1,na.action=na.exclude)
sumCoef <- summary(fitcar)$coefficients
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
predict(fitcar,data.frame(x1=mean(x1)), interval="confidence")
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
mean(x1)
predict(fitcar,data.frame(x1=mean(x1)), interval="confidence")
help(mtcars)
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x,y,xlab='Weight (1000lb)',ylab='MPG')
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x1,y1,xlab='Weight (1000lb)',ylab='MPG')
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x1,y1,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x1,p1[,2],col="purple")
lines(x1,p1[,3],col="purple")
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x1,y1,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x1,p1[,2],col="purple")
lines(x1,p1[,3],col="purple")
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x1,y1,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x1,p1[,2],col="purple")
lines(x1,p1[,3],col="purple")
help(mtcars)
predict(fitcar,data.frame(x1=mean(x1)), interval="prediction")
predict(fitcar,data.frame(x=3), interval="prediction")
predict(fitcar,data.frame(3), interval="prediction")
predict(fitcar,data.frame(x1=3), interval="prediction")
predict(fitcar,data.frame(x1=3), interval="prediction")
predict(fitcar,data.frame(x1=3), interval="prediction")
predict(fitcar,data.frame(x1=3), interval="prediction")
predict(fitcar,data.frame(x1=3), interval="prediction")
fitcar <- lm(y1~x1,na.action=na.exclude)
fitcar1 <- lm(y1~x1)
summary(fitcar)
summary(fitcar1)
predict(fitcar1,data.frame(x1=3), interval="prediction")
rm(ls=())
?rm
rm(list=ls=())
rm(list=ls())
library(UsingR);
data(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
x <- mtcars$wt
y <- mtcars$mpg
fitcar <- lm(y~x,na.action=na.exclude)
sumCoef <- summary(fitcar)$coefficients
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
# Another approach
predict(fitcar,data.frame(x=mean(x)), interval="confidence")
p1<-predict(fitcar,data.frame(x1), interval="confidence")
plot(x,y,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x,p1[,2],col="purple")
lines(x,p1[,3],col="purple")
p1<-predict(fitcar,data.frame(x), interval="confidence")
plot(x,y,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x,p1[,2],col="purple")
lines(x,p1[,3],col="purple")
fit <- lm(y~x)
predict(fit,data.frame(x=3), interval="prediction")
fit1 <- lm(y~I(x/2)
fit1 <- lm(y~I(x/2))
summary(fit1)
x <- mtcars$wt
y <- mtcars$mpg
fitcar <- lm(y~x,na.action=na.exclude)
fit1 <- lm(y~I(x/2))
summary(fit1)
predict(fit1,data.frame(x=mean(x/2)), interval="confidence")
predict(fit1,data.frame(x/2), interval="confidence")
tbl1<-summary(fit1)$coefficients
mn<-tbl1[2,1]      #mean is the estimated slope
std_err<-tbl1[2,2] #standard error
deg_fr<-fit1$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
fit1 <- lm(y~I(x/2))
summary(fit1)
tbl1<-summary(fit1)$coefficients
mn<-tbl1[2,1]      #mean is the estimated slope
std_err<-tbl1[2,2] #standard error
deg_fr<-fit1$df    #degree of freedom
tbl1
mn<-tbl1[2,1]      #mean is the estimated slope
std_err<-tbl1[2,2] #standard error
deg_fr<-fit1$df    #degree of freedom
mn
str_err
std_err
deg_fr
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
summary(fit)$coefficients
fit3<-lm(y~I(x/100))
summary(fit3)$coefficients
fitRes <- fit$residuals ^ 2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
fitInterceptRes <- fitIntercept$residuals ^ 2
sum(fitRes) /sum(fitInterceptRes) # 0.2471672
sum(resid(fit))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
e <- resid(fit)
summary(e)
sqrt(deviance(fit)/df.residual(fit))
predict(fitcar,data.frame(x=mean(x)), interval="confidence")
p1<-predict(fitcar,data.frame(x), interval="confidence")
plot(x,y,xlab='Weight (1000lb)',ylab='MPG')
abline(fitcar,col="red")
lines(x,p1[,2],col="purple")
lines(x,p1[,3],col="purple")
library(UsingR);
data(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
x <- mtcars$wt
y <- mtcars$mpg
fitcar <- lm(y~x,na.action=na.exclude)
sumCoef <- summary(fitcar)$coefficients
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitcar$df) * sumCoef[2, 2]
# Another approach
predict(fitcar,data.frame(x=mean(x)), interval="confidence")
# Another approach
predict(fitcar,data.frame(x=mean(x)), interval="confidence")
# A new car is coming weighing 3000 (weight (1,000 lbs))
predict(fit,data.frame(x=3), interval="prediction")
fit <- lm(y~x)
# A new car is coming weighing 3000 (weight (1,000 lbs))
predict(fit,data.frame(x=3), interval="prediction")
fit1 <- lm(y~I(x/2))
summary(fit1)
tbl1<-summary(fit1)$coefficients
mn<-tbl1[2,1]      #mean is the estimated slope
std_err<-tbl1[2,2] #standard error
deg_fr<-fit1$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
setwd("C:/Data-Science/Machine Learning")
getwd()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
install.packages(rattle)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
